name: Build JAR and Native Executables

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  build-jar:
    name: Build JAR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Compile Java Files
        run: |
          mkdir -p out/classes
          javac -d out/classes $(find src -name "*.java")

      - name: Package JAR
        run: |
          mkdir -p dist
          jar cfm dist/Korz.jar src/META-INF/MANIFEST.MF -C out/classes .

      - name: Upload JAR as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: korz-jar
          path: dist/Korz.jar

  build-native:
    name: Build Native Executables on ${{ matrix.os }}
    needs: build-jar
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest, macos-13] # macos-13 is mac with Intel processor

    steps:
      - name: Download Built JAR
        uses: actions/download-artifact@v4
        with:
          name: korz-jar
          path: build/

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: '17'
          components: 'native-image'

      - name: Compile Native Executable (Linux)
        if: runner.os == 'Linux'
        run: |
          native-image -jar build/Korz.jar -o korz-linux

      - name: Compile Native Executable (macOS ARM)
        if: runner.os == 'macOS' && runner.arch == 'ARM64'
        run: |
          native-image -jar build/Korz.jar -o korz-macos-arm64

      - name: Compile Native Executable (macOS Intel)
        if: runner.os == 'macOS' && runner.arch == 'X64'
        run: |
          native-image -jar build/Korz.jar -o korz-macos-x64

      - name: Compile Native Executable (Windows)
        if: runner.os == 'Windows'
        run: |
          native-image -jar build/Korz.jar -o korz-windows.exe

      - name: Upload Executables as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: korz-${{ runner.os }}-${{ runner.arch }}
          path: korz-${{ runner.os }}*

  release:
    name: Create GitHub Release
    needs: build-native
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: korz-jar
          path: artifacts/

      - name: Download Linux Executable
        uses: actions/download-artifact@v4
        with:
          name: korz-Linux
          path: artifacts/

      - name: Download macOS ARM Executable
        uses: actions/download-artifact@v4
        with:
          name: korz-macOS-arm64
          path: artifacts/

      - name: Download macOS Intel Executable
        uses: actions/download-artifact@v4
        with:
          name: korz-macOS-x64
          path: artifacts/

      - name: Download Windows Executable
        uses: actions/download-artifact@v4
        with:
          name: korz-Windows
          path: artifacts/
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          token: ${{ secrets.GITHUB_TOKEN }}
